#!/usr/bin/env python3

"""

This is basically what the frontend is, if that's even correct terminology.

Handles arguments and passes them to the functions.

"""

import argparse
import os
import sys

from img3 import img3
from img4 import img4
from iphonewiki import iPhoneWiki
from ipsw import IPSW
from ipswapi import APIParser
from manifest import Manifest
from template import Template
from tss import TSS
from usb import USB
from utils import clean, splitKbag


def main():
    argv = sys.argv

    parser = argparse.ArgumentParser(usage=f'{argv[0]} <option> <args>', description='provides useful tools/commands which are used in iOS research')
    parser.add_argument("--backup", help="Backs up a connected device with AFC2", action='store_true')
    parser.add_argument("--baseband", help="Get the baseband version of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--buildid", help="Convert an iOS to its buildid", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--bundle", help="Creates a bundle with the provided patches to allow xpwn's ipsw binary to use the bundle", nargs=2, metavar=('IPSW', 'TYPE'))
    parser.add_argument("--clean", help="If there are any leftover json files, this will get rid of them", action='store_true')
    parser.add_argument("--codename", help="Get the codename of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--copy", help="Copy a file or folder from a connected device using afc", nargs=1, metavar='PATH')
    parser.add_argument("--download", help="Download an ipsw", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--dra", help="Creates an untethered downgrade ipsw with Dora2-iOS's fork of iloader by xerub", nargs=1, metavar='IPSW')
    parser.add_argument("--keys", help="Get keys for an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--kpwn", help="Creates an untethered downgrade ipsw for any bootrom 3GS", nargs=1, metavar='IPSW')
    parser.add_argument("--odysseus", help="Creates an ipsw which one you could use to dump a shsh blob", nargs=1, metavar='IPSW')
    parser.add_argument("--pair", help="Just pair a connected device", action='store_true')
    parser.add_argument("--pwnage", help="Creates an untethered jailbroken ipsw for any bootrom 3GS", nargs=1, metavar='IPSW')
    parser.add_argument("--reboot", help="Restarts a connected device", action='store_true')
    parser.add_argument("--recovery", help="Makes a connected device enter recovery mode", action='store_true')
    parser.add_argument("--shsh", help="Save shsh for all signed iOS versions", action='store_true')
    parser.add_argument("--signed", help="Print the signed iOS versions for a device", nargs=1, metavar='DEVICE')
    parser.add_argument("--split", help="Split a GID decrypted key", nargs=1, metavar='KEY')
    parser.add_argument("--syslog", help="Print syslog of the device", action='store_true')
    parser.add_argument("--tags", help="Print the tags and their hex positions of an img3 file", nargs=1, metavar='FILE')
    parser.add_argument("--template", help="Template parsing", action='store_true')

    parser.add_argument("--test", action='store_true')

    args = parser.parse_args()

    if args.backup:
        device = USB()
        device.backup()

    elif args.baseband:
        # manifest = Manifest(argv[2], argv[3])
        # manifest.getBasebandVersion()  # ./yeet --baseband device version
        pass

    elif args.buildid:
        api = APIParser(argv[2], argv[3])
        print(api.iOSToBuildid())  # ./yeet --buildid device version

    elif args.bundle:
        pass

    elif args.clean:
        clean()

    elif args.codename:
        manifest = Manifest(argv[2], argv[3])
        print(manifest.getCodename())

    elif args.copy:
        device = USB()
        device.copyFromDevice(argv[2])

    elif args.download:
        api = APIParser(argv[2], argv[3])
        api.downloadIPSW()  # ./yeet --download device version

    elif args.dra:
        pass

    elif args.keys:
        wiki = iPhoneWiki(argv[2], argv[3])
        wiki.getWikiKeys()  # ./yeet --keys device version

    elif args.kpwn:
        ipsw = IPSW(argv[2])
        ipsw.create24KpwnIPSW()  # ./yeet --kpwn ipsw

    elif args.odysseus:
        pass

    elif args.pair:
        # device = USB()
        # device.pair()
        pass

    elif args.pwnage:
        pass

    elif args.reboot:
        device = USB()
        device.deviceReboot()  # Damn, only works on my iPhone 4

    elif args.recovery:
        device = USB()
        device.deviceEnterRecovery()

    elif args.shsh:
        pass

    elif args.signed:
        api = APIParser(argv[2], None)  # ./yeet --signed device
        data = api.signed()
        for stuff in data:
            print(f'iOS: {stuff[0]} ({stuff[1]}) ({stuff[2]})')

    elif args.split:
        print(splitKbag(str(argv[2])))  # ./yeet --split kbag

    elif args.syslog:
        device = USB()
        device.syslog()

    elif args.tags:
        image = img3(argv[2])
        image.parseImage()

    elif args.template:
        pass

    elif args.test:
        pass

    else:
        sys.exit(parser.print_help(sys.stderr))


if __name__ == '__main__':
    main()
