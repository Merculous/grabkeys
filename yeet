#!/usr/bin/env python3

"""

This is basically what the frontend is, if that's even correct terminology.

Handles arguments and passes them to the functions.

"""

import argparse
import sys
import os

import iphonewiki
import ipswapi
import template
import tss
import utils


def main():
    argv = sys.argv

    parser = argparse.ArgumentParser(usage=f'{sys.argv[0]} <option> <args>')
    parser.add_argument("--buildid", help="Convert an iOS to its buildid", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--baseband", help="Get the baseband version of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--codename", help="Get the codename of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--download", help="Download an ipsw", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--keys", help="Get keys for an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--manifest", help="Download a build manifest from an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--signed", help="Print the signed iOS versions for a device", nargs=1, metavar='DEVICE')
    parser.add_argument("--shsh", help="Save shsh for all signed iOS versions", action='store_true')
    parser.add_argument("--split", help="Split a GID decrypted key", nargs=1, metavar='KEY')
    
    #parser.add_argument("--test", help="Template shit", nargs=2, metavar=('DEVICE', 'iOS'))

    args = parser.parse_args()

    if args.buildid:
        print(utils.iOSToBuildid(argv[2], argv[3]))  # ./yeet -b device version

    elif args.baseband:
        pass

    elif args.codename:
        print(iphonewiki.getCodename(argv[2], argv[3]))  # ./yeet -c device version

    elif args.download:
        ipswapi.downloadIPSW(argv[2], argv[3])  # ./yeet -d device version

    elif args.keys:
        iphonewiki.getWikiKeys(argv[2], argv[3])  # ./yeet -k device version

    elif args.signed:
        signed = ipswapi.signed(argv[2])  # ./yeet -s device
        for version, buildid in signed:
            print(f'{version} ({buildid}) is signed!')

    elif args.manifest:
        utils.downloadBuildManifest(argv[2], argv[3])  # ./yeet -m device version

    elif args.shsh:
        tss.saveBlobsWithTSSChecker()  # ./yeet --shsh 

    elif args.split:
        print(utils.splitKbag(str(argv[2])))  # ./yeet --split kbag

    #elif args.test:
        #pass

    else:
        sys.exit(parser.print_help(sys.stderr))


if __name__ == '__main__':
    main()
    utils.clean()

