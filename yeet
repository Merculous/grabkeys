#!/usr/bin/env python3

"""

This is basically what the frontend is, if that's even correct terminology.

Handles arguments and passes them to the functions.

"""

import argparse
import os
import sys

from iphonewiki import iPhoneWiki
from ipswapi import APIParser
from manifest import Manifest
from tss import TSS
from utils import clean, splitKbag


def main():
    argv = sys.argv

    parser = argparse.ArgumentParser(usage=f'{argv[0]} <option> <args>')
    parser.add_argument("--buildid", help="Convert an iOS to its buildid", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--baseband", help="Get the baseband version of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--codename", help="Get the codename of an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--download", help="Download an ipsw", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--keys", help="Get keys for an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--manifest", help="Download a build manifest from an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--signed", help="Print the signed iOS versions for a device", nargs=1, metavar='DEVICE')
    parser.add_argument("--shsh", help="Save shsh for all signed iOS versions", action='store_true')
    parser.add_argument("--split", help="Split a GID decrypted key", nargs=1, metavar='KEY')
    
    args = parser.parse_args()

    if args.buildid:
        opts = APIParser(argv[2], argv[3]) # ./yeet -b device version
        print(opts.iOSToBuildid(argv[2], argv[3]))

    elif args.baseband:
        #opts = Manifest(argv[2], argv[3])
        #opts.getBasebandVersion()
        pass

    elif args.codename:
        opts = Manifest(argv[2], argv[3])
        print(opts.getCodename())

    elif args.download:
        opts = APIParser(argv[2], argv[3]) # ./yeet -d device version
        opts.downloadIPSW(argv[2], argv[3])

    elif args.keys:
        opts = iPhoneWiki(argv[2], argv[3])  # ./yeet -k device version
        opts.getWikiKeys(argv[2], argv[3])

    elif args.signed:
        opts = APIParser(argv[2], None) # ./yeet -s device version
        stuff = opts.signed(argv[2])
        for signed in stuff:
            print(f'iOS: {signed[0]} ({signed[1]})')

    elif args.manifest:
        opts = Manifest(argv[2], argv[3])  # ./yeet -m device version
        opts.downloadBuildManifest(argv[2], argv[3])

    elif args.shsh:
        #opts = TSS(argv[2], argv[3], None)  # ./yeet --shsh 
        #opts.saveBlobsWithTSSChecker()
        pass

    elif args.split:
        print(splitKbag(str(argv[2])))  # ./yeet --split kbag

    else:
        sys.exit(parser.print_help(sys.stderr))

    clean()

if __name__ == '__main__':
    main()
