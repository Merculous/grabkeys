#!/usr/bin/env python3

"""

This is basically what the frontend is, if that's even correct terminology.

Handles arguments and passes them to the functions.

"""

import argparse
import os
import sys

from iospytools.foreman import Foreman
from iospytools.img3 import IMG3
from iospytools.img4 import IMG4
from iospytools.iphonewiki import iPhoneWiki
from iospytools.ipsw import IPSW
from iospytools.ipswapi import APIParser
from iospytools.manifest import Manifest
from iospytools.template import Template
from iospytools.tss import TSS
from iospytools.utils import clean, splitKbag

def main():
    """

    Main file to interact with the ipsw.me api and such.
    Some stuff to parse iOS and etc.

    """
    argv = sys.argv

    parser = argparse.ArgumentParser(usage=f'{argv[0]} <option> <args>', description='provides useful tools/commands which are used in iOS research')
    parser.add_argument("--buildid", help="Convert an iOS to its buildid", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--bundle", help="Creates a bundle with the provided patches to allow xpwn's ipsw binary to use the bundle", nargs=2, metavar=('IPSW', 'TYPE'))
    parser.add_argument("--clean", help="If there are any leftover files, this will get rid of them", action='store_true')
    parser.add_argument("--download", help="Download an ipsw", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--dra", help="Creates an untethered downgrade ipsw with Dora2-iOS's fork of iloader by xerub", nargs=1, metavar='IPSW')
    parser.add_argument("--keys", help="Get keys for an iOS", nargs=2, metavar=('DEVICE', 'iOS'))
    parser.add_argument("--kpwn", help="Creates an untethered downgrade ipsw for any bootrom 3GS", nargs=1, metavar='IPSW')
    parser.add_argument("--odysseus", help="Creates an ipsw which one you could use to dump a shsh blob", nargs=1, metavar='IPSW')
    parser.add_argument("--pwnage", help="Creates an untethered jailbroken ipsw for any bootrom 3GS", nargs=1, metavar='IPSW')
    parser.add_argument("--shsh", help="Save shsh for all signed iOS versions", action='store_true')
    parser.add_argument("--signed", help="Print the signed iOS versions for a device", nargs=1, metavar='DEVICE')
    parser.add_argument("--split", help="Split a GID decrypted key", nargs=1, metavar='KEY')
    parser.add_argument("--tags", help="Print the tags and their hex positions of an img3 file", nargs=1, metavar='FILE')

    parser.add_argument("--test")

    args = parser.parse_args()

    if args.buildid:
        api = APIParser(argv[2], argv[3])
        print(api.iOSToBuildid())  # ./yeet --buildid device version

    elif args.bundle:
        pass

    elif args.clean:
        clean()

    elif args.download:
        api = APIParser(argv[2], argv[3])
        api.downloadIPSW()  # ./yeet --download device version

    elif args.dra:
        pass

    elif args.keys:
        wiki = iPhoneWiki(argv[2], argv[3])
        data = wiki.getWikiKeys()
        for stuff in data:
            print(stuff)

    elif args.kpwn:
        ipsw = IPSW(argv[2])
        ipsw.create24KpwnIPSW()  # ./yeet --kpwn ipsw

    elif args.odysseus:
        pass

    elif args.pwnage:
        pass

    elif args.shsh:
        pass

    elif args.signed:
        api = APIParser(argv[2], None)  # ./yeet --signed device
        data = api.signed()
        for stuff in data:
            print(f'iOS: {stuff[0]} ({stuff[1]}) ({stuff[2]})')

    elif args.split:
        kbag = splitKbag(argv[2])  # ./yeet --split kbag
        print('IV:', kbag['iv'])
        print('Key:', kbag['key'])

    elif args.tags:
        image = img3(argv[2])
        image.parseImage()

    elif args.test:
        manifest = Manifest()
        print(manifest.getFilePaths())

    else:
        sys.exit(parser.print_help(sys.stderr))

    clean()


if __name__ == '__main__':
    main()
